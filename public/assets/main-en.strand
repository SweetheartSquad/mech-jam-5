::start
// some info for if you want to mod it:
//
// basic syntax examples:
// 	::passage title
// 	[[basic link]]
// 	[[link with different label>passage title]]
// 	[[link with different action|this.something=true;this.goto('passage title');]]
// 	<<if this.something>><<elseif this.somethingElse>><<endif>>
// 	<<do this.something=true;>>
// 	<<print this.something>>
// 	>passage break
//
// js examples:
// 	this.goto('passage')
// 	this.show('texture', { duration, x, y, scale, animate, freq })
// 	this.scrim(amount, duration)
// 	this.tween(object, 'property', to, duration, from, ease)
// 	this.gameObject - npc/interrupt that triggered the dialog
// 	this.scene      - game scene
// 	this.voice      - audio to play as letters tick in
// 	this.ease       - easing functions
//
// game object stuff:
// 	this.Area(name, [objects])
// 	this.Prop({ texture, x, y, alpha, scale, flip, blur, animate, offset })
// 	this.PropParallax({ texture, alpha, scale, flip, blur, mult, animate, offset }),

<<if !this.started>>
<<do
	// save location on refresh when debugging
	if (this.debug && !window.debugUnload) {
		window.debugUnload = true;
		window.addEventListener('beforeunload', () => {
			// if (window.scene.strand.cleared) return;
			// window.scene.strand.savestate.area = window.scene.strand.scene.area;
			// window.scene.strand.savestate.x = window.scene.strand.scene.player.transform.x;
			// window.scene.strand.savestate.y = window.scene.strand.scene.player.transform.y;
			// window.scene.strand.save();
		});
	}
	// middle mouse click to go back in debug
	if (this.debug && !window.debugBack) {
		window.debugBack = true;
		window.addEventListener('pointerdown', (event) => {
			if (event.button === 1) {
				window.scene.strand.back();
			}
		});
	}

	this.Area('empty', []);
	this.Area('intro', [
		this.Prop({ texture: 'bg_ship', scale: 1, x: 100, y: -110, offset: -1000000 }),
	]);

	// start
	this.started=true;
	this.scene.goto({ area: 'intro' });
	requestAnimationFrame(() => {
		this.scrim(1, 3000);
		this.scene.dialogue.sprBg.alpha = 0;
	});
>>
<<endif>>
<<do
	if (this.debug) this.show('').then(() => {this.goto('start2')});
	else {
		this.scene.dialogue.textText.style.fill = 0xffd20a;
		this.show('img_cheryl', { scale: 1, duration: 0 });
	}
>>
LANDING SEQUENCE ON PLANET 54XE COMPLETE
>OPEN AIRLOCK
<<do
	this.scene.dialogue.textText.style.fill = 0xffffff;
	this.music('bgm');
	this.show('').then(() => {this.goto('start2')});
>>

::start2
<<do
	this.tween(this.scene.border.display.container, 'alpha', 1, 5000);
	this.tween(this.scene.dialogue.sprBg, 'alpha', 1, 5000, 0);;
	this.goto('main');
>>

::close
this should never render

::choiceDefault
->


::debug menu
<<do
	this.scene.strand.passages['area warp'] = { title: 'area warp', body: Object.keys(this.scene.areas).filter(i => i !== 'root').map(i => '[['+i+'|this.scene.goto({ area: "'+i+'" }); this.goto("close")]]').concat('[[back|this.back()]]').join('\n') };
>>
[[passage select>passage select]]
[[language select]]
[[area warp]]
[[teleport|
	const canvas = window.game.app.renderer.context.gl.canvas;
	const verts = [];
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		const p = this.mousePos(event);
		this.scene.player.setPosition(p.x, p.y);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('pointerdown', onClick);
		canvas.parentElement.style.cursor = 'inherit';
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[drawing tools]]
[[close]]
[[back|this.back()]]

::drawing tools
[[toggle coords|
	this.coordsShown = !this.coordsShown;
	if (this.coordsShown) {
		this.elDebugText = document.createElement('div');
		this.elDebugText.style.lineHeight = '1rem';
		this.elDebugText.style.pointerEvents = 'none';

		const elPlayerCoordsLabel = document.createElement('label');
		elPlayerCoordsLabel.style.backgroundColor = '#000';
		const elPlayerCoordsInput = document.createElement('input');
		elPlayerCoordsInput.style.pointerEvents = 'initial';
		elPlayerCoordsInput.readOnly = true;
		elPlayerCoordsLabel.textContent = 'player ';
		elPlayerCoordsLabel.style.fontSize = '1rem';
		elPlayerCoordsLabel.appendChild(elPlayerCoordsInput);
		this.elDebugText.appendChild(elPlayerCoordsLabel);

		this.elDebugText.appendChild(document.createElement('br'));

		const elMouseCoordsLabel = document.createElement('label');
		elMouseCoordsLabel.style.backgroundColor = '#000';
		const elMouseCoordsInput = document.createElement('input');
		elMouseCoordsInput.style.pointerEvents = 'initial';
		elMouseCoordsInput.readOnly = true;
		elMouseCoordsLabel.textContent = 'mouse ';
		elMouseCoordsLabel.style.fontSize = '1rem';
		elMouseCoordsLabel.appendChild(elMouseCoordsInput);
		this.elDebugText.appendChild(elMouseCoordsLabel);
		
		document.querySelector('.resizerChild').appendChild(this.elDebugText);
		this.debugCoordsUpdater = this.Updater(() => {
			elPlayerCoordsInput.value = `${this.scene.player.transform.x.toFixed(2)}, ${this.scene.player.transform.y.toFixed(2)}`;
			const p = this.relativeMouse();
			elMouseCoordsInput.value = `${Math.floor(p.x)}, ${Math.floor(p.y)}`;
		});
	} else {
		this.elDebugText.remove();
		this.debugCoordsUpdater.destroy();
	}
	this.goto('close');
]]
[[get coords|
	const canvas = window.game.app.renderer.context.gl.canvas;
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		const p = this.mousePos(event);
		navigator.clipboard.writeText(`x: ${Math.floor(p.x)}, y: ${Math.floor(p.y)}`);
		console.log(`x: ${Math.floor(p.x)}, y: ${Math.floor(p.y)}`);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('pointerdown', onClick);
		canvas.parentElement.style.cursor = 'inherit';
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[place props|
	const canvas = window.game.app.renderer.context.gl.canvas;

	const textures = () => Object.entries(resources).filter(([k,r]) => !k.match(/\.[2-9]\d*?$/) && !k.match(/^https?:/) && r?.baseTexture);

	let tex = 0;
	const spr = new this.PIXI.Sprite();
	spr.anchor.x = 0.5;
	spr.anchor.y = 1.0;
	this.scene.container.addChild(spr);
	const onWheel = (event) => {
		if (!event.deltaY) return;
		const d = Math.sign(event.deltaY);
		tex += d;
		const ts = textures();
		if (tex < 0) tex = ts.length - 1;
		tex %= ts.length;
		console.log(ts[tex][0]);
		spr.texture = ts[tex][1];
	};
	const onMove = (event) => {
		const p = this.mousePos(event);
		spr.x = Math.floor(p.x);
		spr.y = Math.floor(p.y);
	};
	const placed = [];
	let flip = false;
	const onClick = (event) => {
		if (event.button !== 0) return;
		event.preventDefault();
		event.stopPropagation();
		this.scene.player.canMove = false;
		setTimeout(() => this.scene.player.canMove = true, 100);
		if (event.ctrlKey) {
			if (placed.length) {
				const p = placed.pop();
				this.remove(p);
			}
			return;
		}
		if (event.shiftKey) {
			flip = !flip;
			spr.scale.x = flip ? -1 : 1;
			return;
		}
		const p = this.mousePos(event);
		const prop = this.Prop({ texture: textures()[tex][0], x: Math.floor(p.x), y: Math.floor(p.y), flip });
		placed.push(prop);
		this.add(prop);
	};
	const onContextMenu = (event) => {
		event.preventDefault();
		canvas.removeEventListener('wheel', onWheel);
		canvas.removeEventListener('pointerdown', onClick);
		canvas.removeEventListener('pointermove', onMove);
		canvas.parentElement.style.cursor = 'inherit';
		spr.destroy();
		const str = placed.map(p => `this.Prop({ texture: '${p.spr.texture.label}', x: ${Math.floor(p.transform.x)}, y: ${Math.floor(p.transform.y)}${p.spr.scale.x < 0 ? ', flip: true' : ''} }),`).join('\n');
		navigator.clipboard.writeText(str);
		console.log(str);
	};
	requestAnimationFrame(() => {
		canvas.addEventListener('wheel', onWheel);
		canvas.addEventListener('pointerdown', onClick);
		canvas.addEventListener('pointermove', onMove);
		canvas.addEventListener('contextmenu', onContextMenu, { once: true });
	});
	canvas.parentElement.style.cursor = 'crosshair';
	this.goto('close');
]]
[[back|this.back()]]

::main
<<do
	this.sfx('voiceDefault');
	this.talkednpc = 0;
	this.supply = 0

	if (this.scene.areas.main) {
		this.scene.areas.main.forEach(i => {
			this.destroy(i);
		});
		if (this.scene.area === 'main') {
			this.scene.goto({ area: 'empty' });
		}
	}
	const objects = [
		this.PropParallax({ texture: 'bg_parallax', offset: -1000000, mult: 1 }),
	];
	this.Area('main', objects);
	if (this.skipped) {
		this.scene.goto({ area: 'main' });
	} else {
		this.scene.goto({ area: 'intro' });
	}
	this.goto('close');

	this.next = 'diplomat';
	this.scene.start();
>>








::scenes
actual written scenes below



::diplomat prebuild
todo diplomat prebuild stuff
[[>close]]

::diplomat prefight
todo diplomat prefight stuff
[[>close]]

::diplomat postfight
todo diplomat postfight stuff
<<if !this.won>>
lol you lost
[[>close]]
<<else>>
<<do this.next = 'signal failure'>>
wow you won
[[>close]]
<<endif>>


::signal failure prebuild
todo signal failure prebuild stuff
[[>close]]

::signal failure prefight
todo signal failure prefight stuff
[[>close]]

::signal failure postfight
todo signal failure postfight stuff
<<if !this.won>>
lol you lost
[[>close]]
<<else>>
<<do this.next = 'end'>>
wow you won
[[>close]]
<<endif>>


::end prefight
todo ending














::parts
part definitions below



::head Block
000
000
.=.

::head Tee
00000
.000.
.===.
..=..

::head Small
00
=0

::head Smaller
=

::head 1
.0.
0.0.
0.0.
000.
.0..
000.
.0..
.=..

::head 2
0...0
00.00
.000.
00000
.000.
..=..

::head 3
...0..
.00000
0000000
..000..
0000000
.00=00.

::chest 1
...=
...0..
=00000=
...0...
...0
...0
...0
...0
...0
..=0=
....

::chest 2
..=..
=0=0=
.000.
.000.
0=0=0

::chest 3
===
=.=

::chest 4
...=...
=.000.=
.00000.
0000000
0000000
.00000.
..=0=..

::chest 5
...0=0..
.0000000
000000000
=0000000=
.0000000.
..00000..
=00...00=

::arm 1

.0.
.0.
.00=
000=
.0.


::arm 2
0=
0=

::arm 3
...0=
0000=
0....
00...

::arm 4
.000=
.000=
00..

::arm 5
...=
.00=
00
.00

::leg 1
......0=
.....00.
.....00.
......0.
00000.00
00000..0
00000
00000
00000


::leg 2
..=
.0.
00.
00.
00
00
00
00
00
00
00
00

::leg 3
0=.
000
.0.
00.











::modules
module definitions below



::module Cockpit
A standard cockpit.
---
500, cockpit
---
00
00

::module Tee
A weirdly shaped cockpit.

Some more text.
---
750, cockpit
---
000
.0.
.0.

::module Bar
A weirdly shaped cockpit.

Some more text.
---
750, cockpit
---
0
0
0
0

::module Bar2
A weirdly shaped cockpit.

Some more text.
---
750, cockpit
---
000

::module Bar3
A weirdly shaped cockpit.

Some more text.
---
750, cockpit
---
0.0.
.0.0

::module Single
A small cockpit.

Some more text.
---
750, cockpit
---
0

::module square
A small cockpit.

Some more text.
---
750, cockpit
---
000
0.0
000

::module rocket1
A small cockpit.

Some more text.
---
750, cockpit
---
.0.
000
000


::module crosshair
A small cockpit.

Some more text.
---
750, cockpit
---
.0.
000
.0.

::module stair1
A small cockpit.

Some more text.
---
750, Heatsink
---
00.
.00

::module stair2
A small cockpit.

Some more text.
---
750, Heatsink
---
.000
000.

::module stair3
A small cockpit.

Some more text.
---
750, Heatsink
---
.000
.00
000.

::module stair4
A small cockpit.

Some more text.
---
750, Heatsink
---
...000
..00
000..

::module shapesies
A small cockpit.

Some more text.
---
750, Heatsink
---
00000
0..00
..000

::module whoa
A small cockpit.

Some more text.
---
750, Heatsink
---
00..0
0..00
0..00
00000

::module bucket1
A small cockpit.

Some more text.
---
750, Heatsink
---
00000
0...0
0...0
0...0

::module bucket2
A small cockpit.

Some more text.
---
750, Heatsink
---
00000
....0
00000

::module bucket3
A small cockpit.

Some more text.
---
750, Heatsink
---
0000
0...
0...
0000